fragment RelationPermissionToUserFields on RelationPermissionToUser {
  id
  userId
  user {
    email
  }
  granter {
    email
  }
  isAllowed
  permissionId
  permission {
    name
  }
  grantedAt
}

query RelationsPermissionToUser(
  $where: RelationPermissionToUserWhereInput
  $skip: Int
  $take: Int
  $orderBy: [RelationPermissionToUserOrderByWithRelationInput]
) {
  relationsPermissionToUser(
    where: $where
    skip: $skip
    take: $take
    orderBy: $orderBy
  ) {
    ...RelationPermissionToUserFields
  }

  total: relationsPermissionToUserCount(where: $where)
}

mutation DeleteRelationPermissionToUser($id: String!) {
  deleteRelationPermissionToUser(id: $id) {
    ...RelationPermissionToUserFields
  }
}

mutation DeleteRelationsPermissionToUser($ids: [String!]!) {
  deleteRelationsPermissionToUser(ids: $ids) {
    count
  }
}

query RelationPermissionToUser($where: RelationPermissionToUserWhereInput!) {
  relationPermissionToUser(where: $where) {
    ...RelationPermissionToUserFields
  }
}

mutation CreateRelationPermissionToUser(
  $permissionId: String!
  $userId: String!
  $granterId: String!
  $isAllowed: Boolean
) {
  createRelationPermissionToUser(
    permissionId: $permissionId
    userId: $userId
    granterId: $granterId
    isAllowed: $isAllowed
  ) {
    ...RelationPermissionToUserFields
  }
}

mutation UpdateRelationPermissionToUser(
  $id: String!
  $data: RelationPermissionToUserUpdateInput!
) {
  updateRelationPermissionToUser(id: $id, data: $data) {
    ...RelationPermissionToUserFields
  }
}
