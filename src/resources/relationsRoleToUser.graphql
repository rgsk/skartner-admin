fragment RelationRoleToUserFields on RelationRoleToUser {
  id
  roleId
  role {
    id
    name
  }
  userId
  user {
    email
  }
  assignerId
  assigner {
    email
  }
  assignedAt
}

query RelationsRoleToUser(
  $where: RelationRoleToUserWhereInput
  $skip: Int
  $take: Int
  $orderBy: [RelationRoleToUserOrderByWithRelationInput]
) {
  relationsRoleToUser(
    where: $where
    skip: $skip
    take: $take
    orderBy: $orderBy
  ) {
    ...RelationRoleToUserFields
  }

  total: relationsRoleToUserCount(where: $where)
}

query RelationRoleToUser($where: RelationRoleToUserWhereInput!) {
  relationRoleToUser(where: $where) {
    ...RelationRoleToUserFields
  }
}
mutation DeleteRelationRoleToUser($id: String!) {
  deleteRelationRoleToUser(id: $id) {
    ...RelationRoleToUserFields
  }
}

mutation DeleteRelationsRoleToUser($ids: [String!]!) {
  deleteRelationsRoleToUser(ids: $ids) {
    count
  }
}

mutation CreateRelationRoleToUser(
  $assignerId: String!
  $roleId: String!
  $userId: String!
) {
  createRelationRoleToUser(
    assignerId: $assignerId
    roleId: $roleId
    userId: $userId
  ) {
    ...RelationRoleToUserFields
  }
}

mutation UpdateRelationRoleToUser(
  $id: String!
  $data: RelationRoleToUserUpdateInput!
) {
  updateRelationRoleToUser(id: $id, data: $data) {
    ...RelationRoleToUserFields
  }
}
