fragment RelationPermissionToRoleFields on RelationPermissionToRole {
  id
  permissionId
  permission {
    name
  }
  roleId
  role {
    name
  }
  granterId
  granter {
    email
  }
  isAllowed
  grantedAt
}

query RelationsPermissionToRole(
  $where: RelationPermissionToRoleWhereInput
  $skip: Int
  $take: Int
  $orderBy: [RelationPermissionToRoleOrderByWithRelationInput]
) {
  relationsPermissionToRole(
    where: $where
    skip: $skip
    take: $take
    orderBy: $orderBy
  ) {
    ...RelationPermissionToRoleFields
  }

  total: relationsPermissionToRoleCount(where: $where)
}

mutation DeleteRelationPermissionToRole($id: String!) {
  deleteRelationPermissionToRole(id: $id) {
    ...RelationPermissionToRoleFields
  }
}

mutation DeleteRelationsPermissionToRole($ids: [String!]!) {
  deleteRelationsPermissionToRole(ids: $ids) {
    count
  }
}

query RelationPermissionToRole($where: RelationPermissionToRoleWhereInput!) {
  relationPermissionToRole(where: $where) {
    ...RelationPermissionToRoleFields
  }
}

mutation UpdateRelationPermissionToRole(
  $id: String!
  $data: RelationPermissionToRoleUpdateInput!
) {
  updateRelationPermissionToRole(id: $id, data: $data) {
    ...RelationPermissionToRoleFields
  }
}

mutation CreateRelationPermissionToRole(
  $permissionId: String!
  $roleId: String!
  $granterId: String!
  $isAllowed: Boolean
) {
  createRelationPermissionToRole(
    permissionId: $permissionId
    roleId: $roleId
    granterId: $granterId
    isAllowed: $isAllowed
  ) {
    ...RelationPermissionToRoleFields
  }
}
